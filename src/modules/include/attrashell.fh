 !-----------------------------------------------------------------------------------------!
 ! This subroutine computes the V_elec contribution for a shell pair for each grid point   !
 ! It loops over each gridpoint, calls esp_1pdm and stores the value in esp_electronic()   !  
 ! This is - \sum_{mu nu} P_{mu nu} * V_{mu nu}                                            !
 ! See Eqn. A14 of Obara-Saika [J. Chem. Phys. 84, 3963 (1986)]                            !        
 ! First, calculates 〈 phi_mu | phi_nu 〉 for all mu and nu                                !
 ! Then, P_{mu nu} * 〈 phi_mu | 1/|r-C| | phi_nu 〉                                        !
 !-----------------------------------------------------------------------------------------!
#if defined (OEPROP)
subroutine esp_shell_pair(IIsh, JJsh, npoints, xyz_points, esp_electronic)
#elif defined (OEI)
subroutine attrashell(IIsh, JJsh)
#endif
   use quick_method_module, only: quick_method
   use quick_basis_module, only: quick_basis, attraxiao
   use quick_molspec_module, only: quick_molspec, xyz
#if defined (OEI)
   use quick_molspec_module, only: natom
#endif
   use quick_overlap_module, only: gpt, opf, overlap_core
   use quick_constants_module, only : Pi

   implicit none

   integer :: IIsh, JJsh, ips, jps, L, Maxm, NII2, NIJ1, NJJ2
   double precision :: a, b, Ax, Ay, Az, Bx, By, Bz, Cx, Cy, Cz, g, U
   double precision :: attra, overlap_ss_prefix, PCsquare, Px, Py, Pz

#if defined (OEI)
   double precision :: Z
#endif

   double precision, dimension(0:20) :: aux
   double precision AA(3),BB(3),CC(3),PP(3)
   common /xiaoattra/attra,aux,AA,BB,CC,PP,g 
   double precision RA(3),RB(3),RP(3),inv_g,g_table(200), valopf

#if defined (OEPROP)
   integer :: igridpoint, npoints
   double precision, intent(in) :: xyz_points(3,npoints)
   double precision, intent(inout) :: esp_electronic(npoints)
#elif defined (OEI)
   integer :: iatom
#endif
  
   ! Related to positions of "QM" atoms
   Ax=xyz(1,quick_basis%katom(IIsh))
   Ay=xyz(2,quick_basis%katom(IIsh))
   Az=xyz(3,quick_basis%katom(IIsh))
 
   Bx=xyz(1,quick_basis%katom(JJsh))
   By=xyz(2,quick_basis%katom(JJsh))
   Bz=xyz(3,quick_basis%katom(JJsh))
 
   NII2=quick_basis%Qfinal(IIsh)
   NJJ2=quick_basis%Qfinal(JJsh)
   Maxm=NII2+NJJ2
   NIJ1=10*NII2+NJJ2
            
   ! Calculation of V_elec starts here
   do ips=1,quick_basis%kprim(IIsh)
      a=quick_basis%gcexpo(ips,quick_basis%ksumtype(IIsh))
      do jps=1,quick_basis%kprim(JJsh)
         b=quick_basis%gcexpo(jps,quick_basis%ksumtype(JJsh))
 
         ! Screen one electron integrals
         valopf = opf(a, b, quick_basis%gccoeff(ips,quick_basis%ksumtype(IIsh)), &
         quick_basis%gccoeff(jps,quick_basis%ksumtype(JJsh)), Ax, Ay, Az, Bx, By, Bz)
 
         if(abs(valopf) .gt. quick_method%coreIntegralCutoff) then
 
           !Eqn 14 Obara-Saika 86
           call gpt(a,b,Ax,Ay,Az,Bx,By,Bz,Px,Py,Pz,0,g_table)
           g = a+b
           !Eqn 15 Obara-Saika 86
           inv_g = 1.0d0 / dble(g)
 
           ! Calculate first two terms of Obara & Saika Eqn A20
           overlap_ss_prefix = dexp(-(a*b*((Ax - Bx)**2.d0 + (Ay - By)**2.d0 + (Az - Bz)**2.d0)*inv_g)) * 2.d0 * Pi * inv_g
           !constanttemp=dexp(-((a*b*((Ax - Bx)**2.d0 + (Ay - By)**2.d0 + (Az - Bz)**2.d0))*inv_g))
           !const = overlap_core(a,b,0,0,0,0,0,0,Ax,Ay,Az,Bx,By,Bz,Px,Py,Pz,g_table) * 2.d0 * sqrt(g/Pi)*constanttemp
           !const = 2.d0*(Pi/g)*constanttemp

#if defined (OEPROP)
           ! Loops over external grid points/MM atoms
            do igridpoint=1,npoints
              Cx=xyz_points(1,igridpoint)
              Cy=xyz_points(2,igridpoint)
              Cz=xyz_points(3,igridpoint)
#elif defined (OEI)
            !nextatom=number of external MM point charges. set to 0 if none used
            do iatom=1,natom+quick_molspec%nextatom
              if(iatom<=natom)then
                Cx=xyz(1,iatom)
                Cy=xyz(2,iatom)
                Cz=xyz(3,iatom)
                Z=-1.0d0*quick_molspec%chg(iatom)
              else
                Cx=quick_molspec%extxyz(1,iatom-natom)
                Cy=quick_molspec%extxyz(2,iatom-natom)
                Cz=quick_molspec%extxyz(3,iatom-natom)
                Z=-quick_molspec%extchg(iatom-natom)
              endif
#endif
                ! Calculate the last term of Obara--Saika Eqn A21
                PCsquare = (Px-Cx)**2 + (Py -Cy)**2 + (Pz -Cz)**2
                ! Compute Obara--Saika Eqn A21
                U = g* PCsquare
 
               ! Calculate the last term of Obara--Saika Eqn A20
               call FmT(Maxm,U,aux)
               ! Calculate all the auxilary integrals and store in attraxiao array
               do L = 0,maxm
#if defined (OEPROP)
                  ! sign (-1.0d0) is used to ensure the auxilary integrals are negative
                  aux(L) = -1.0d0*aux(L)*overlap_ss_prefix
#elif defined (OEI)
                  aux(L) = aux(L)*overlap_ss_prefix*Z
#endif
                  attraxiao(1,1,L)=aux(L)
               enddo
 
!               NIJ1=10*NII2+NJJ2
#if defined (OEPROP)
               ! Call and get P_{mu nu} V_{mu nu} into esp_electronic( )
               call esp_1pdm(ips,jps,IIsh,JJsh,NIJ1,Ax,Ay,Az,Bx,By,Bz, &
                     Cx,Cy,Cz,Px,Py,Pz, esp_electronic(igridpoint))
#elif defined (OEI)
               call nuclearattra(ips,jps,IIsh,JJsh,NIJ1,Ax,Ay,Az,Bx,By,Bz, &
                     Cx,Cy,Cz,Px,Py,Pz)
#endif
            enddo

         endif
      enddo
   enddo
#if defined (OEPROP)
 end subroutine esp_shell_pair
#elif defined (OEI)
 end subroutine attrashell
#endif

#if defined (OEPROP)
  subroutine efield_shell_pair(IIsh,JJsh,efield_electronic)
#elif defined (OEI)
  subroutine attrashellopt(IIsh,JJsh)
#endif
    use quick_overlap_module, only: opf, overlap
    use quick_molspec_module, only: quick_molspec, xyz
    use quick_basis_module, only: quick_basis, attraxiaoopt, attraxiao
    use quick_method_module, only: quick_method
    use quick_constants_module, only: Pi
#if defined (OEI)
    use quick_molspec_module, only: natom
#endif
    !    use xiaoconstants

    implicit none

    integer :: IIsh, JJsh, ips, jps, L, Maxm, NII2, NIJ1, NJJ2
    double precision :: a, b, Ax, Ay, Az, Bx, By, Bz, Cx, Cy, Cz, g, U
    double precision :: attra, constant, constanttemp, PCsquare, Px, Py, Pz

    double precision, dimension(0:20) :: aux
    double precision AA(3),BB(3),CC(3),PP(3)
    common /xiaoattra/attra,aux,AA,BB,CC,PP,g

    double precision RA(3),RB(3),RP(3), valopf, g_table(200)

#if defined (OEPROP)
    integer :: igridpoint
    double precision, intent(inout) :: efield_electronic(3,quick_molspec%nextpoint)
#elif defined (OEI)
    integer :: iatom
    double precision :: Z
#endif

    Ax=xyz(1,quick_basis%katom(IIsh))
    Ay=xyz(2,quick_basis%katom(IIsh))
    Az=xyz(3,quick_basis%katom(IIsh))

    Bx=xyz(1,quick_basis%katom(JJsh))
    By=xyz(2,quick_basis%katom(JJsh))
    Bz=xyz(3,quick_basis%katom(JJsh))

    ! The purpose of this subroutine is to calculate the nuclear attraction
    ! of an electron  distributed between gtfs with orbital exponents a
    ! and b on A and B with angular momentums defined by i,j,k (a's x, y
    ! and z exponents, respectively) and ii,jj,k and kk on B with the core at
    ! (Cx,Cy,Cz) with charge Z. m is the "order" of the integral which
    ! arises from the recusion relationship.

    ! The this is taken from the recursive relation found in Obara and Saika,
    ! J. Chem. Phys. 84 (7) 1986, 3963.

    ! The first step is generating all the necessary auxillary integrals.
    ! These are (0|1/rc|0)^(m) = 2 Sqrt (g/Pi) (0||0) Fm(g(Rpc)^2)
    ! The values of m range from 0 to i+j+k+ii+jj+kk.

    NII2=quick_basis%Qfinal(IIsh)
    NJJ2=quick_basis%Qfinal(JJsh)
    Maxm=NII2+NJJ2+1+1

    do ips=1,quick_basis%kprim(IIsh)
      a=quick_basis%gcexpo(ips,quick_basis%ksumtype(IIsh))
      do jps=1,quick_basis%kprim(JJsh)
        b=quick_basis%gcexpo(jps,quick_basis%ksumtype(JJsh))
        valopf = opf(a, b, quick_basis%gccoeff(ips,quick_basis%ksumtype(IIsh)),&
          quick_basis%gccoeff(jps,quick_basis%ksumtype(JJsh)), Ax, Ay, Az, Bx, By, Bz)

        if(abs(valopf) .gt. quick_method%coreIntegralCutoff) then
          g = a+b
          Px = (a*Ax + b*Bx)/g
          Py = (a*Ay + b*By)/g
          Pz = (a*Az + b*Bz)/g
          g_table = g**(-1.5)

          constant = overlap(a,b,0,0,0,0,0,0,Ax,Ay,Az,Bx,By,Bz,Px,Py,Pz,g_table) &
            * 2.d0 * sqrt(g/Pi)

#if defined (OEPROP)
          do igridpoint=1,quick_molspec%nextpoint
            Cx=quick_molspec%extpointxyz(1,igridpoint)
            Cy=quick_molspec%extpointxyz(2,igridpoint)
            Cz=quick_molspec%extpointxyz(3,igridpoint)
#elif defined (OEI)
          do iatom=1,natom+quick_molspec%nextatom
            if(quick_basis%katom(IIsh).eq.iatom.and.quick_basis%katom(JJsh).eq.iatom)then
              continue
            else
              if(iatom<=natom)then
                Cx=xyz(1,iatom)
                Cy=xyz(2,iatom)
                Cz=xyz(3,iatom)
                Z=-1.0d0*quick_molspec%chg(iatom)
              else
                Cx=quick_molspec%extxyz(1,iatom-natom)
                Cy=quick_molspec%extxyz(2,iatom-natom)
                Cz=quick_molspec%extxyz(3,iatom-natom)
                Z=-1.0d0*quick_molspec%extchg(iatom-natom)
              endif
#endif
              PCsquare = (Px-Cx)**2 + (Py -Cy)**2 + (Pz -Cz)**2
              U = g* PCsquare
              !    Maxm = i+j+k+ii+jj+kk
              call FmT(Maxm,U,aux)
              do L = 0,maxm
#if defined (OEPROP)
                aux(L) = -1.0d0*aux(L)*constant
#elif defined (OEI)
                aux(L) = aux(L)*constant*Z
#endif
                attraxiao(1,1,L)=aux(L)
              enddo
              do L = 0,maxm-1
                attraxiaoopt(1,1,1,L)=2.0d0*g*(Px-Cx)*aux(L+1)
                attraxiaoopt(2,1,1,L)=2.0d0*g*(Py-Cy)*aux(L+1)
                attraxiaoopt(3,1,1,L)=2.0d0*g*(Pz-Cz)*aux(L+1)
              enddo
              ! At this point all the auxillary integrals have been calculated.
              ! It is now time to decompase the attraction integral to it's
              ! auxillary integrals through the recursion scheme.  To do this we use
              ! a recursive function.
              !    attraction = attrecurse(i,j,k,ii,jj,kk,0,aux,Ax,Ay,Az,Bx,By,Bz, &
              !    Cx,Cy,Cz,Px,Py,Pz,g)
              NIJ1=10*NII2+NJJ2
#if defined (OEPROP)
              call efield_1pdm(ips,jps,IIsh,JJsh,NIJ1,Ax,Ay,Az,Bx,By,Bz, &
                  Cx,Cy,Cz,Px,Py,Pz,efield_electronic(1,igridpoint))
#elif defined (OEI)
              call nuclearattraopt(ips,jps,IIsh,JJsh,NIJ1,Ax,Ay,Az,Bx,By,Bz, &
                  Cx,Cy,Cz,Px,Py,Pz,iatom)
            endif
#endif
          enddo
        endif
      enddo
    enddo
  
    ! Xiao HE remember to multiply Z   01/12/2008
    !    attraction = attraction*(-1.d0)* Z

#if defined (OEPROP)
  end subroutine efield_shell_pair
#elif defined (OEI)
  end subroutine attrashellopt
#endif
