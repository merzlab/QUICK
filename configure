#!/bin/sh

#  !---------------------------------------------------------------------!
#  ! Written by Madu Manathunga on 07/09/2020                            !
#  !                                                                     !
#  ! Copyright (C) 2020-2021 Merz lab                                    !
#  ! Copyright (C) 2020-2021 GÃ¶tz lab                                    !
#  !                                                                     !
#  ! This Source Code Form is subject to the terms of the Mozilla Public !
#  ! License, v. 2.0. If a copy of the MPL was not distributed with this !
#  ! file, You can obtain one at http://mozilla.org/MPL/2.0/.            !
#  !_____________________________________________________________________!
#
#  !---------------------------------------------------------------------!
#  ! This source code sets up the environment for QUICK compilation and  !
#  ! writes input file for make.                                         !
#  !---------------------------------------------------------------------!

#  !---------------------------------------------------------------------!
#  ! Set version                                                         !
#  !---------------------------------------------------------------------!
QUICK_VERSION='QUICK-20.06'
QUICK_HOME=`pwd`
cdate=`date +'%m/%d/%Y'`
ctime=`date +'%r'`

#  !---------------------------------------------------------------------!
#  ! function to print how to use this script                            !
#  !---------------------------------------------------------------------!
print_help(){

cat<<EOF

  Use this script as ./configure [flags] compiler

  Available flags are:
      --prefix <dir> User specified installation directory
      -serial        Builds a serial version
      -mpi           Compiles MPI prallel version
      -cuda          Builds GPU version that utilizes a single NVIDIA GPU
      -debug         Compiles debug version
      -shared        Build shared object libraries
      -arch <pascal|volta|turing>  
                     Specify gpu architecture. Applicable for cuda and 
                     cudampi versions only. If unspecified, QUICK will be 
                     compiled for several architectures based on the CUDA
                     toolkit version.

  Supported compilers are: gnu, intel
  
  For example, GPU version with intel compiler tool chain can be compiled as
  follows:
                    ./configure -gpu intel              

EOF
exit 0;

}

#  !---------------------------------------------------------------------!
#  ! Variable declarations                                               !
#  !---------------------------------------------------------------------!

# quick version flags
serial='no'
mpi='no'
cuda='no'
cudampi='no'
debug='no'
installer=''
exename=''

# keeps track of what compilers being used
fort='no'
cc='no'
cxx='no'
nvcc='no'

# where to install
useprefix='false'
quick_prefix="$QUICK_HOME"

# flag to indicate if a so library compilation is required
shared='no'

# compiler specific flags
fort_flags=''
cc_flags=''
cxx_flags=''
cuda_flags=''
cpp_flags=''

# archiver related variables
arch='ar'
arch_flags='cr'
ranlib='ranlib'
libext='a'

# linker flags
ldflags=''
cflags=''

# optimization levels
opt_flags='-O2'
blas_opt_flags='-O3'

# cuda architecture flags
uspec_arch='false'
cuda_arch=''
cuda_arch_flags=''

# extra cuda flags
cuda_ext_flags='-Xptxas=-v -m64 -use_fast_math'

# cuda include flags
cuda_incl_flags=''

# flags to generate PIC in so library case 
lib_flags=''
cuda_lib_flags=''

# debug flags
fort_debug_flags=''
cc_debug_flags=''
cxx_debug_flags=''
cuda_debug_flags=''

#  !---------------------------------------------------------------------!
#  ! Check user input                                                    !
#  !---------------------------------------------------------------------!
if [ $# -lt 1 ]; then print_help; fi

while [ $# -gt 0 ]; do
  case "$1" in
    -serial)      serial='yes';mpi='no';cuda='no';cudampi='no';;
    -mpi)         serial='no';mpi='yes';cuda='no';cudampi='no';;
    -cuda)        serial='no';mpi='no';cuda='yes';cudampi='no';;
    -cudampi)     serial='no';mpi='no';cuda='no';cudampi='yes';;
    -debug)       debug='yes';;
    -shared)      shared='yes';; 
    -arch)        shift; cuda_arch=$1; uspec_arch='true';;
    --prefix)     shift; quick_prefix=$1; useprefix='true';;
    -h| -H| -help| --help) print_help;;
    -*)  echo "Error: $1 is an unknown flag"
         echo "       Run this script as './configure [flags] compiler'"
         echo "       Run './configure --help' for more information"
         exit 1;;

     *)  if [ $# -gt 1 ]; then
           echo "Error: $1 is an unknown compiler"
           echo "       Run this script as './configure [flags] compiler'"
           echo "       Run './configure --help' for more information"
           exit 1
         fi

         compiler=$1;;
  esac
  shift
done

echo "serial=$serial, mpi=$mpi, cuda=$cuda, cudampi=$cudampi compiler=$compiler "

# check prefix and perform necessary operations 
if [ "$useprefix" = "true" ]; then
  if [ "$QUICK_HOME" = "$quick_prefix" ]; then
    echo "Specified --prefix and the current folder is the same. Please choose a different location."
    exit 1
  fi

  # create tests and basis directories if they dont exist
  if [ ! -d "$quick_prefix/test" ]; then
    mkdir -p "$quick_prefix/test"
    echo "Creating symlink for $quick_prefix/test"
    cd "$quick_prefix/test"
    lndir "$QUICK_HOME/test"
    cd "$QUICK_HOME"
  fi

  # copy the contents of basis folder since user may delete/relocate
  # QUICK_HOME folder after installation
  if [ ! -d "$quick_prefix/basis" ]; then
    mkdir -p "$quick_prefix/basis"
    cp -rf "$QUICK_HOME/basis/"* "$quick_prefix/basis/"
  fi
fi

echo ""
echo "QUICK will be installed in $quick_prefix"
echo ""

#  !---------------------------------------------------------------------!
#  ! Create essential directories                                        !
#  !---------------------------------------------------------------------!
if [ ! -d $quick_prefix/bin ]; then
  mkdir -p "$quick_prefix/bin"
fi

if [ ! -d $quick_prefix/lib ]; then
  mkdir -p "$quick_prefix/lib"
fi

if [ ! -d $quick_prefix/obj ]; then
  mkdir -p "$quick_prefix/obj"
fi

#  !---------------------------------------------------------------------!
#  ! Set compilers                                                       !
#  !---------------------------------------------------------------------!

case "$compiler" in
  gnu)
    if [ "$mpi" = 'no' ] && [ "$cudampi" = 'no' ]; then
      if [ -z "$FC" ]; then fort='gfortran'; else fort="$FC";fi
      if [ -z "$CC" ]; then cc='gcc'; else cc="$CC";fi
      if [ -z "$CXX" ]; then cxx='g++'; else cxx="$CXX";fi
    else
      if [ -z "$MPIF90" ]; then fort='mpif90'; else fort="$MPIF90";fi
      if [ -z "$MPICC" ]; then cc='mpicc'; else cc="$MPICC";fi
      if [ -z "$MPICXX" ]; then cxx='mpicxx'; else cxx="$MPICXX";fi      
    fi
    ;;

  intel)
    if [ "$mpi" = 'no' ] && [ "$cudampi" = 'no' ]; then
      if [ -z "$FC" ]; then fort='ifort'; else fort="$FC";fi
      if [ -z "$CC" ]; then cc='icc'; else cc="$CC";fi
      if [ -z "$CXX" ]; then cxx='icpc'; else cxx="$CXX";fi
    else
      if [ -z "$MPIF90" ]; then fort='mpiifort'; else fort="$MPIF90";fi
      if [ -z "$MPICC" ]; then cc='mpiicc'; else cc="$MPICC";fi
      if [ -z "$MPICXX" ]; then cxx='mpiicpc'; else cxx="$MPICXX";fi
    fi
    ;;
esac

#  !---------------------------------------------------------------------!
#  ! Check for CUDA tool kit and compiler                                !
#  !---------------------------------------------------------------------!

# this function sets the user defined cuda architecture flags, if specified
set_uspec_arch(){
  case "$cuda_arch" in
    pascal)
      echo "Configuring for SM6.0"
      cuda_arch_flags="-gencode arch=compute_60,code=sm_60";;
    volta)
      echo "Configuring for SM7.0"
      cuda_arch_flags="-gencode arch=compute_70,code=sm_70";;
    turing)
      echo "Configuring for SM7.5"
      cuda_arch_flags="-gencode arch=compute_75,code=sm_75";;
  esac
}

if [ "$cuda" = 'yes' ] || [ "$cudampi" = 'yes' ]; then
  if [ -z "$CUDA_HOME" ]; then
    echo "Error: CUDA_HOME environment variable is not set."
    echo "Please make sure CUDA toolkit is loaded."
    exit 1
  fi

  if [ ! -x "$CUDA_HOME/bin/nvcc" ]; then
    echo "Error: nvcc compiler is not available in $CUDA_HOME/bin/"
    exit 1
  fi

  if [ -z "$NVCC" ]; then nvcc="$CUDA_HOME/bin/nvcc"; else nvcc="$NVCC"; fi  

    #SM8.0 = A100
    #sm80flags='-gencode arch=compute_80,code=sm_80'
    #SM7.5 = RTX20xx, Tesla T4, Quadro RTX, RTX Titan
    sm75flags='-gencode arch=compute_60,code=sm_75'
    #SM7.0 = V100, Titan V
    sm70flags='-gencode arch=compute_60,code=sm_70'
    #SM6.2 = ???
    sm62flags='-gencode arch=compute_62,code=sm_62'
    #SM6.1 = GP106 = GTX-1070, GP104 = GTX-1080, GP102 = Titan-X[P]
    sm61flags='-gencode arch=compute_61,code=sm_61'
    #SM6.0 = GP100 / P100 = DGX-1
    sm60flags='-gencode arch=compute_60,code=sm_60'

    cudaversion=`$nvcc --version | grep 'release' | cut -d' ' -f5 | cut -d',' -f1`

    if [ "$cudaversion" = "11.0" ]; then

      echo "CUDA Version $cudaversion detected"

      if [ "$uspec_arch" = 'true' ]; then
        set_uspec_arch
      else

        sm75flags='-gencode arch=compute_75,code=sm_75'
        sm70flags='-gencode arch=compute_70,code=sm_70'          
        echo "Configuring for SM6.0, SM6.1, SM7.0, SM7.5"
        cuda_arch_flags="$sm60flags $sm61flags $sm70flags $sm75flags -Wno-deprecated-declarations"
      fi
    elif [ "$cudaversion" = "10.0" -o "$cudaversion" = "10.1" -o "$cudaversion" = "10.2" ]; then
      echo "CUDA Version $cudaversion detected"

      if [ "$uspec_arch" = 'true' ]; then
        set_uspec_arch
      else
        echo "Configuring for SM6.0, SM6.1, SM7.0 and SM7.5"
        cuda_arch_flags="$sm60flags $sm61flags $sm70flags $sm75flags -Wno-deprecated-declarations"
      fi
    elif [ "$cudaversion" = "9.0" -o "$cudaversion" = "9.1" -o "$cudaversion" = "9.2" ]; then
      echo "CUDA Version $cudaversion detected"

      if [ "$uspec_arch" = 'true' ]; then
        set_uspec_arch
      else
        echo "Configuring for SM6.0, SM6.1 and SM7.0"
        cuda_arch_flags="$sm60flags $sm61flags $sm70flags -Wno-deprecated-declarations"
      fi
    elif [ "$cudaversion" = "8.0" ]; then
      echo "CUDA Version $cudaversion detected"

      if [ "$uspec_arch" = 'true' ]; then
        set_uspec_arch
      else
        echo "Configuring for SM6.0 and SM6.1"
        cuda_arch_flags="$sm60flags $sm61flags"
      fi
    else
      echo "Error: Unsupported CUDA version $cudaversion detected."
      echo "       QUICK requires at least CUDA version 8.0"
      exit 1
    fi

fi

#  !---------------------------------------------------------------------!
#  ! Set compiler flags                                                  !
#  !---------------------------------------------------------------------!

# set debug flags
if [ "$debug" = 'yes' ]; then
  opt_flags='-O0'
  blas_opt_flags='-O0'

  case "$compiler" in
    gnu)
      fort_debug_flags='-g'
      cc_debug_flags='-g'
      cxx_debug_flags='-g'
      ;;
    intel)
      fort_debug_flags='-g'
      cc_debug_flags='-g'
      cxx_debug_flags='-g'
      ;;
  esac

  if [ "$cuda" = 'yes' | "$cudampi" = 'yes' ]; then
    cuda_debug_flags='-g -G'
  fi
fi

# set library flags if so library is requested
if [ "$shared" = 'yes' ]; then
  lib_flags='-fPIC'
  cuda_lib_flags="--compiler-options '-fPIC'"
  arch="$FC"
  arch_flag='-shared -o'
  ranlib='echo'
  libext='so'
fi

# sed compiler specific flags
case "$compiler" in
  gnu)
    fort_flags="$opt_flags $fort_debug_flags -mtune=native -ffree-form -cpp -DGNU $lib_flags -I$quick_prefix/obj -J$quick_prefix/obj"
    if [ "$cuda" = 'yes' ] || [ "$cudampi" = 'yes' ]; then
      cflags="-lgfortran -L$CUDA_HOME/lib64 -lcuda -lm -lcudart -lcudadevrt -lcublas -lcusolver"
    fi    
    ;;
  intel)
    fort_flags="$opt_flags $fort_debug_flags -ip -cpp $lib_flags -I$quick_prefix/obj -module $quick_prefix/obj"
    if [ "$cuda" = 'yes' ] || [ "$cudampi" = 'yes' ]; then
      cflags="-L$CUDA_HOME/lib64 -lcuda -lm -lcudart -lcudadevrt -lcublas -lcusolver"
    fi
    ;;
esac

cc_flags="$opt_flags $cc_debug_flags $lib_flags -I$quick_prefix/obj"
cxx_flags="$opt_flags $cxx_debug_flags $lib_flags -I$quick_prefix/obj"
ldflags="$fort_flags -lstdc++"

# For mpi & cudampi versions, libmpi_cxx.so may be required. This has to be silently checked. 
if [ "$mpi" = 'yes' -o "$cudampi" = 'yes' ]; then
  mpi_cxx_flag=''
  
  # clean test files if they already exist
  rm -f test_mpicxx.cpp test_prog.f90 test_mpicxx.o test_prog test_mpicxx

  # create the dummy source files
  cat > test_mpicxx.cpp << EOF
  #include <mpi.h>
  void test_func(){MPI_Start((MPI_Request *)0);}
  extern "C" {void test_func_(){test_func();}}
EOF

  cat > test_prog.f90 << EOF
  program test
    call test_func()
  end program test
EOF

  # compile the test sources

#  $cxx -c test_mpicxx.cpp -o test_mpicxx.o 2>/dev/null >/dev/null
  $cxx -show
  $cxx -c test_mpicxx.cpp -o test_mpicxx.o 
  if [ "$?" -ne 0 ]; then
    echo "Error: MPI/C++ source cannot be compiled using $cxx"
    echo ""
    exit 1
  fi

#  $fort -c test_prog.f90 -o test_prog.o 2>/dev/null >/dev/null
  $fort -c test_prog.f90 -o test_prog.o 
  if [ "$?" -ne 0 ]; then
    echo "Error: Fortran90 source cannot be compiled using $fort"
    echo ""
    exit 1
  fi

  # try to link the object files without -lmpi_cxx and if it doesnt work set mpi_cxx_flag.
#  $fort $ldflags test_mpicxx.o test_prog.o -o test_prog 2>/dev/null >/dev/null
  $fort $ldflags test_mpicxx.o test_prog.o -o test_prog 
  if [ "$?" -ne 0 ]; then
    mpi_cxx_flag="-lmpi_cxx"
  fi

  #try to link with libmpi_cxx
#  $fort $ldflags $mpi_cxx_flag test_mpicxx.o test_prog.o -o test_prog 2>/dev/null >/dev/null
  $fort $ldflags $mpi_cxx_flag test_mpicxx.o test_prog.o -o test_prog 
  if [ "$?" -ne 0 ]; then
    echo "Error: Fortran90 and C++ code cannot be linked using $fort $ldflags $mpi_cxx_flag"
    echo "Try to check the commands using 'mpif90 -show'"
    mpif90 -show
    exit 1
  fi

  ldflags="$ldflags $mpi_cxx_flag"

  rm -f test_mpicxx.cpp test_prog.f90 test_mpicxx.o test_prog test_mpicxx

fi

echo "$ldflags"

if [ "$cuda" = 'yes' ] || [ "$cudampi" = 'yes' ]; then

  cpp_flags="$opt_flags -I$CUDA_HOME/include $lib_flags -DCUBLAS_USE_THUNKING"

  cuda_flags="$opt_flags $cuda_debug_flags $cuda_ext_flags $cuda_arch_flags $lib_flags"

  cflags="-L$CUDA_HOME/lib64 -lcuda -lm -lcudart -lcudadevrt -lcublas -lcusolver"

  if [ "$compiler" = 'gnu' ]; then cflags="-lgfortran $cflags"; fi

  cuda_incl_flags="-L$CUDA_HOME/lib64 -I$CUDA_HOME/include -DCUDA_SPDF"

  if [ "$cudampi" = 'yes' ]; then
    cuda_incl_flags="$cuda_incl_flags -I$MPI_INCLUDES -I$MPI_LIBS"
  fi

fi

#  !---------------------------------------------------------------------!
#  ! Set installer and generate make input file                          !
#  !---------------------------------------------------------------------!

if [ "$serial" = 'yes' ]; then
  installer='serial'
  exename='quick'
elif [ "$mpi" = 'yes' ]; then
  installer='mpi'
  exename='quick.MPI'
elif [ "$cuda" = 'yes' ]; then
  installer='cuda'
  exename='quick.cuda'
elif [ "$cudampi" = 'yes' ]; then
  installer='cudampi'
  exename='quick.cuda.MPI'
fi

cat > make.in << EOF

# $QUICK_VERSION configuration file
# Created on $cdate at $ctime

#!---------------------------------------------------------------------!
#! Set installer                                                       !
#!---------------------------------------------------------------------!

INSTALLER=$installer

#!---------------------------------------------------------------------!
#! Set directories                                                     !
#!---------------------------------------------------------------------!

installfolder=$quick_prefix
srcfolder=$QUICK_HOME/src
objfolder=$quick_prefix/obj
exefolder=$quick_prefix/bin
libfolder=$quick_prefix/lib
configfolder=$QUICK_HOME/src/config
subfolder=$QUICK_HOME/src/subs
blasfolder=$QUICK_HOME/src/blas
libxcfolder=$QUICK_HOME/src/libxc
cudafolder=$QUICK_HOME/src/cuda
cublasfolder=$QUICK_HOME/src/cuda/cublas
cusolverfolder=$QUICK_HOME/src/cuda/cusolver
octfolder=$QUICK_HOME/src/octree
modfolder=$QUICK_HOME/src/modules

#!---------------------------------------------------------------------!
#! Set compilers                                                       !
#!---------------------------------------------------------------------!

FC=$fort
CC=$cc
CXX=$cxx  
CUDAC=$nvcc

#!---------------------------------------------------------------------!
#! Set archiver and flags for the libraries                            !
#!---------------------------------------------------------------------!

ARCH=$arch
ARCHFLAGS=$arch_flags
RANLIB=$ranlib
LIBEXT=$libext
BLAS_FLAGS=$blas_opt_flags $lib_flags

#!---------------------------------------------------------------------!
#! Common compiler  flags                                              !
#!---------------------------------------------------------------------!

FFLAGS=$fort_flags
LDFLAGS=$ldflags
CCFLAGS=$cc_flags
CXXFLAGS=$cxx_flags

EOF

if [ "$cuda" = 'yes' ] || [ "$cudampi" = 'yes' ]; then
cat >> make.in << EOF
#!---------------------------------------------------------------------!
#! CUDA specific flags                                                 !
#!---------------------------------------------------------------------!

CPP_FLAG=$cpp_flags
CUDA_FLAGS=$cuda_flags
CUDA_INCL_FLAGS=$cuda_incl_flags
CFLAGS=$cflags

EOF
fi

echo "Input file for GNU make was successfully created."
echo ""

#  !---------------------------------------------------------------------!
#  ! Generate config.h in src directory                                  !
#  !---------------------------------------------------------------------!

if [ "$serial" = 'yes' ]; then
  cat > "$QUICK_HOME/src/config.h" << EOF
#undef CUDA
#undef MPI
EOF
elif [ "$mpi" = 'yes' ]; then
  cat > "$QUICK_HOME/src/config.h" << EOF
#undef CUDA
#define MPIV
EOF
elif [ "$cuda" = 'yes' ]; then
  cat > "$QUICK_HOME/src/config.h" << EOF
#define CUDA
#define QUICK_LIBXC
#undef MPI
EOF
elif [ "$cudampi" = 'yes' ]; then
  cat > "$QUICK_HOME/src/config.h" << EOF
#undef CUDA
#define MPIV
#define CUDA_MPIV
#define QUICK_LIBXC
EOF
fi

if [ "$debug" = 'yes' ]; then
  cat >> "$QUICK_HOME/src/config.h" << EOF
#define DEBUG 
EOF
fi

# this must be fixed with libxc code refactoring
if [ "$cuda" = 'yes' ] || [ "$cudampi" = 'yes' ];then
  if [ "$debug" = 'yes' ]; then
    cat >> "$QUICK_HOME/src/config.h" << EOF
#define GPU_DEBUG 1 //this is for libxc gpu debugging
EOF
  else
    cat >> "$QUICK_HOME/src/config.h" << EOF
#define GPU_DEBUG 0 //this is for libxc gpu debugging
EOF
  fi
fi

#  !---------------------------------------------------------------------!
#  ! Setup test script                                                   !
#  !---------------------------------------------------------------------!

cp -f "$QUICK_HOME/tools/runtest" "$quick_prefix/"
sed -i 's:unknown-installdir:'$quick_prefix':g' "$quick_prefix/runtest"
sed -i 's/unknown-qexe/'$exename'/g' "$quick_prefix/runtest"

#  !---------------------------------------------------------------------!
#  ! Clean directories                                                   !
#  !---------------------------------------------------------------------!

make clean > /dev/null 

