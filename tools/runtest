#!/bin/sh

#  !---------------------------------------------------------------------!
#  ! Written by Madu Manathunga on 07/19/2020                            !
#  !                                                                     !
#  ! Copyright (C) 2020-2021 Merz lab                                    !
#  ! Copyright (C) 2020-2021 GÃ¶tz lab                                    !
#  !                                                                     !
#  ! This Source Code Form is subject to the terms of the Mozilla Public !
#  ! License, v. 2.0. If a copy of the MPL was not distributed with this !
#  ! file, You can obtain one at http://mozilla.org/MPL/2.0/.            !
#  !_____________________________________________________________________!
#
#  !---------------------------------------------------------------------!
#  ! This source code runs a series test cases saved in test folder and  !
#  ! verifies the correctness of a QUICK installation.                   !
#  ! ** Must be executed from QUICK_HOME or installation directories.    !
#  !---------------------------------------------------------------------!

#  !---------------------------------------------------------------------!
#  ! QUICK version                                                       !
#  !---------------------------------------------------------------------!

QUICK_VERSION='QUICK-20.06'

#  !---------------------------------------------------------------------!
#  ! Variable definitions                                                !
#  !---------------------------------------------------------------------!

# directories
installdir=`pwd`
testdir="$installdir/test"
qbasisdir="$installdir/basis"
qbindir="$installdir/bin"

# executables

qexe=''
buildtypes=''
serial='no'
mpi='no'
cuda='no'
cudampi='no'

# flag to indicate if mpirun is available
ismpirun='no'
# number of cores for mpi tests
ncores=2

# flag for a mp2 calculation
ismp2=''

# current date time variable
cdate=''
ctime=''

#  !---------------------------------------------------------------------!
#  ! Function definitions                                                !
#  !---------------------------------------------------------------------!

# this function prints help page
print_help(){

echo  "                                                                                                                                       
  Use this script as ./runtest [flags]                            
                                                                            
  Available flags are:                                                      
      --serial       Tests QUICK serial version                                
      --mpi          Tests QUICK MPI prallel version                           
      --cuda         Tests QUICK GPU version
      --ncores <ncore>
                     Specify the number of cores to be used in MPI tests.
                     If unspecified, 2 cores will be used.    
                                                                            
  If the version flags are not specified, the script will try to detect
  the executables and test them.
  
  "

exit 0;

}


print_test_info(){

  ismp2='no'

  case "$i" in
    ene_psb5_rhf_631g)        echo "RHF energy test: s and p basis functions";;
    ene_psb5_rhf_631gss)      echo "RHF energy test: s, p and d basis functions";;
    ene_psb3_blyp_631g)       echo "DFT energy test: s and p basis functions, native BLYP functional";;
    ene_psb3_blyp_631gss)     echo "DFT energy test: s, p and d basis functions, native BLYP functional";;
    ene_psb3_b3lyp_631g)      echo "DFT energy test: s and p basis functions, native B3LYP functional";;
    ene_psb3_b3lyp_631gss)    echo "DFT energy test: s, p and d basis functions, native B3LYP functional";;
    ene_psb3_libxc_lda_631g)  echo "DFT energy test: s and p basis functions, libxc LDA functional";;
    ene_psb3_libxc_gga_631g)  echo "DFT energy test: s and p basis functions, libxc GGA functional";;
    ene_psb3_libxc_hgga_631g) echo "DFT energy test: s and p basis functions, libxc hybrid GGA functional";;
    ene_wat2_mp2_631g)        echo "MP2 energy test: s and p basis functions"; ismp2='yes';;
    ene_wat2_mp2_631gss)      echo "MP2 energy test: s, p and d basis functions"; ismp2='yes';;
    opt_wat_rhf_631g)         echo "RHF geometry optimization test: s and p basis functions";;
    opt_wat_rhf_ccpvdz)       echo "RHF geometry optimization test: s, p and d basis functions";;
  esac

}

#  !---------------------------------------------------------------------!
#  ! Read input                                                          !
#  !---------------------------------------------------------------------

while [ $# -gt 0 ]; do
  case "$1" in
    --serial)      serial='yes'; buildtypes="$buildtypes serial";;
    --mpi)         mpi='yes'; buildtypes="$buildtypes mpi";;
    --cuda)        cuda='yes'; buildtypes="$buildtypes cuda";;
    --cudampi)     cudampi='yes'; buildtypes="$buildtypes cudampi";;
    --ncores)      shift; ncores=$1;;
    -h| -H| -help| --help) print_help;;
     *) 
         echo  "Neglecting unknown flag: $1";;
  esac
  shift
done

#  !---------------------------------------------------------------------!
#  ! Check directories & executables                                     !
#  !---------------------------------------------------------------------!

if [ ! -d "$qbindir" ]; then
  echo  "Error: QUICK bin folder not found. "
  exit 1
fi

if [ ! -d "$qbasisdir" ]; then
  echo  "Error: QUICK basis folder not found. "
  exit 1
else
  export QUICK_BASIS=$qbasisdir
fi

if [ ! -d "$testdir" ]; then
  echo  "Error: QUICK test folder not found. "
  exit 1
fi

if [ "$serial" = 'yes' -o "$mpi" = 'yes' -o "$cuda" = 'yes' -o "$cudampi" = 'yes' ]; then

  if [ "$serial" = 'yes' ] && [ ! -x "$qbindir/quick" ]; then
    echo  "Error: $qbindir/quick not found."
    exit 1
  fi

  if [ "$mpi" = 'yes' ] && [ ! -x "$qbindir/quick.MPI" ]; then
    echo  "Error: $qbindir/quick.MPI not found."
    exit 1
  fi

  if [ "$cuda" = 'yes' ] && [ ! -x "$qbindir/quick.cuda" ]; then
    echo  "Error: $qbindir/quick.cuda not found."
    exit 1
  fi

  if [ "$cudampi" = 'yes' ] && [ ! -x "$qbindir/quick.cuda.MPI" ]; then
    echo  "Error: $qbindir/quick.cuda.MPI not found."
    exit 1
  fi

else

  # automatically check for executables
  if [ -x "$qbindir/quick.cuda.MPI" ]; then
    cudampi='yes'
    buildtypes="$buildtypes cudampi"
  fi

  if [ -x "$qbindir/quick.cuda" ]; then
    cuda='yes'
    buildtypes="$buildtypes cuda"
  fi

  if [ -x "$qbindir/quick.MPI" ]; then
    mpi='yes'
    buildtypes="$buildtypes mpi"
  fi

  if [ -x "$qbindir/quick" ]; then
    serial='yes'
    buildtypes="$buildtypes serial"
  fi

  if [ "$serial" = 'no' -a "$mpi" = 'no' -a "$cuda" = 'no' -a "$cudampi" = 'no' ]; then
    echo  "Error: No QUICK executables found in $qbindir. "
    exit 1
  fi

fi

if [ ! -f "$testdir/testlist.txt" ]; then
  echo  "Error: testlist.txt not found in $testdir. "
  exit 1
fi

echo ""

# check for mpirun 
if [ "$mpi" = 'yes' -o "$cudampi" = 'yes' ]; then
  if [ `command -v mpirun | wc -l` -gt 0 ]; then
    ismpirun='yes'
    echo  "MPI tests will be carried out with $ncores cores. "
  else
    echo  "MPI tests will be carried out with a single core. "
  fi
  echo ""
fi

#  !---------------------------------------------------------------------!
#  ! Create required directories                                         !
#  !---------------------------------------------------------------------!

if [ -d "$testdir/runs" ]; then
  rm -rf "$testdir/runs/"*
else
  mkdir -p "$testdir/runs"
fi

for buildtype in $buildtypes; do
  mkdir -p "$testdir/runs/$buildtype"
done

#  !---------------------------------------------------------------------!
#  ! Run tests                                                           !
#  !---------------------------------------------------------------------!

cd "$testdir"

for buildtype in $buildtypes; do

  cdate=`date +'%m/%d/%Y'`
  ctime=`date +'%r'`

  echo  "Testing $buildtype version started on $cdate at $ctime. "
  echo ""

  # set qexe
  if [ "$buildtype" = 'serial' ]; then
    qexe='quick'
  elif [ "$buildtype" = 'mpi' ]; then
    qexe='quick.MPI'
  elif [ "$buildtype" = 'cuda' ]; then
    qexe='quick.cuda'
  elif [ "$buildtype" = 'cudampi' ]; then
    qexe='quick.cuda.MPI'
  fi


  total=`cat "$testdir/testlist.txt" |wc -l`
  a=1
  cd "$testdir/runs/$buildtype"

  # Run energy tests
  for i in `awk '{print $1}' "$testdir/testlist.txt"| grep "ene"`; do
    echo "Running test $a of $total"
    cp "$testdir/$i.in" ./
	
    # This variable will keep the information of jobcard
    jobcard=`head -1 "$i.in"`
    enecalc=`echo $jobcard | grep 'ENERGY' |wc -l` 

    print_test_info "$i"

    # Run the test case
    if [ "$buildtype" = 'mpi' ] || [ "$buildtype" = 'cudampi' ] && [ "$ismpirun" = 'yes' ] && [ "$ismp2" = 'no' ]; then
      mpirun -np "$ncores" "$qbindir/$qexe" "${i}.in"  2> /dev/null > /dev/null
    else
      "$qbindir/$qexe" "${i}.in"  2> /dev/null > /dev/null	
    fi

    # Check the accuracy
    # For RHF and DFT,  just compare the total energy. For MP2 compare the mp2 energy. 
    if [ "$enecalc" -gt 0 -a "$ismp2" = 'yes' ]; then

      refval=`grep "#MP2_ENERGY" "$i.in" |awk '{print $2}'`
      newval=`grep -A 20 "REACH CONVERGENCE AFTER" ${i}.out| grep "EMP2" | awk '{print $3}'`
      echo "$refval  $newval"|awk '{
        x=sqrt(($1-$2)^2); 
        if(x>=0.00001) stat="Failed"; else stat="Passed"; 
        print "MP2 energy: " $2 ", Reference value: " $1 ". " stat""
      }'                         

    else 

      refval=`grep "#TOTAL_ENERGY" "$i.in" | awk '{print $2}'`
      newval=`grep -A 8 "REACH CONVERGENCE AFTER" "$i.out" | grep "TOTAL" | awk '{print $4}'`
      echo "$refval  $newval"|awk '{
        x=sqrt(($1-$2)^2); 
        if(x>=0.00001) stat="Failed"; else stat="Passed"; 
        print "Total energy: " $2 ", Reference value: " $1 ". " stat""
      }'	

    fi

    echo ""
    a=$((a+1))
  done



  # Run gradient tests
  for i in `awk '{print $1}' "$testdir/testlist.txt" |grep "grad"`; do
    echo "Running test $a of $total"
    cp "$testdir/$i.in" ./

    #This variable will keep the information of jobcard
    jobcard=`head -1 "$i.in"`
    gradcalc=`echo $jobcard | grep 'GRADIENT' | wc -l`

    print_test_info "$i"

    # run the test case
    if [ "$buildtype" = 'mpi' ] || [ "$buildtype" = 'cudampi' ] && [ "$ismpirun" = 'yes' ]; then
      mpirun -np "$ncores" "$qbindir/$qexe" "${i}.in"  2> /dev/null > /dev/null
    else
      "$qbindir/$qexe" "${i}.in"  2> /dev/null > /dev/null
    fi    
		
	#Check the accuracy of gradients of first step
	grep "#ref_grad" "$i.in" |awk '{print $2}'>refGrad.txt

    echo ""
    a=$((a+1))	
  done


  # Run geometry optimization tests
  for i in `awk '{print $1}' "$testdir/testlist.txt" | grep "opt"`; do
    echo "Running test $a of $total"
    cp "$testdir/${i}.in" ./

    print_test_info "$i"

    # Run the test case
    "$qbindir/$qexe" "$i.in" 2> /dev/null > /dev/null

    # Check the accuracy of gradients of first step
    grep "#ref_grad" "$i.in" | awk '{print $2}'>refGrad.txt
    sed -n '/GEOMETRY FOR OPTIMIZATION STEP   1/,/GEOMETRY FOR OPTIMIZATION STEP   2/p' "$i.out" | sed -n '/NEW_GRAD/,/OPTIMZATION STATISTICS/p' |grep '[0-9]' |awk '{print $4}'>newGrad.txt
    paste refGrad.txt newGrad.txt >compGrad.txt
    awk '{
      x=sqrt(($1-$2)^2); 
      if(x>=0.00001) stat="Failed"; else stat="Passed"; 
      print "Final gradient: " $2 ", Reference value: " $1 ". " stat""
      }' compGrad.txt
    echo ""
      
    # remove gradient info files
    rm refGrad.txt newGrad.txt compGrad.txt
      
    # Check the minimum energy
    refval=$(grep "#ref_min_ene" "$i.in" | awk '{print $2}')
    newval=$(grep "MINIMIZED ENERGY" "$i.out" | awk '{print $3}')
    echo "$refval  $newval"|awk '{
      x=sqrt(($1-$2)^2); 
      if(x>=0.00001) stat="Failed"; else stat="Passed"; 
      print "Minimized energy: " $2 ", Reference value: " $1 ". " stat""
      }'
    echo ""

    a=$((a+1))		

  done
	
  echo "$buildtype tests are done. All input and output files are located in $testdir/runs/$buildtype."
  echo ""
  cd "$testdir"
done

echo  "All tests are done! "

cd $installdir

exit 0


