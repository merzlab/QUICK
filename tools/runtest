#!/bin/sh

#  !---------------------------------------------------------------------!
#  ! Written by Madu Manathunga on 07/19/2020                            !
#  !                                                                     !
#  ! Copyright (C) 2020-2021 Merz lab                                    !
#  ! Copyright (C) 2020-2021 GÃ¶tz lab                                    !
#  !                                                                     !
#  ! This Source Code Form is subject to the terms of the Mozilla Public !
#  ! License, v. 2.0. If a copy of the MPL was not distributed with this !
#  ! file, You can obtain one at http://mozilla.org/MPL/2.0/.            !
#  !_____________________________________________________________________!
#
#  !---------------------------------------------------------------------!
#  ! This source code runs a series test cases saved in test folder and  !
#  ! verifies the correctness of a QUICK installation.                   !
#  ! ** Must be executed from QUICK_HOME or installation directories.    !
#  !---------------------------------------------------------------------!

#  !---------------------------------------------------------------------!
#  ! QUICK version                                                       !
#  !---------------------------------------------------------------------!

QUICK_VERSION='QUICK-21.03'

#  !---------------------------------------------------------------------!
#  ! Variable definitions                                                !
#  !---------------------------------------------------------------------!

# directories
installdir=`pwd`
testdir="$installdir/test"
qbasisdir="$installdir/basis"
qbindir="$installdir/bin"
export QUICK_HOME=$installdir

# executables

qexe=''
buildtypes=''
serial='no'
mpi='no'
cuda='no'
cudampi='no'

# flag to indicate if mpirun is available
ismpirun='no'
# number of cores for mpi tests
ncores=2

# flag for a mp2 calculation
ismp2=''

# current date time variable
cdate=''
ctime=''

# test types
test_ene='no'
test_grad='no'
test_opt='no'
uspec_test='no'

#  !---------------------------------------------------------------------!
#  ! Function definitions                                                !
#  !---------------------------------------------------------------------!

# this function prints help page
print_help(){

echo  "                                                                                                                                       
  Use this script as ./runtest [flags]                            
                                                                            
  Available flags are:                                                      
      --serial       Tests QUICK serial version                                
      --mpi          Tests QUICK MPI prallel version                           
      --cuda         Tests QUICK GPU version
      --cudampi      Tests QUICK multi-GPU version
      --ene          Run only energy tests
      --grad         Run only gradient tests
      --opt          Run only geometry optimization tests

                                                                            
  If the version flags are not specified, the script will try to detect
  the executables and test them.
  
  "

exit 0;

}


print_test_info(){

  ismp2='no'
  testinfo=""
  case "$t" in
    ene_AlH3_rhf_sto3g)                testinfo="ALH3: RHF energy test: STO-3G basis set";;
    ene_BeH2_rhf_sto3g)                testinfo="BeH2: RHF energy test: STO-3G basis set";;
    ene_BH3_rhf_sto3g)                 testinfo="BH3: RHF energy test: STO-3G basis set";;
    ene_CaCl2_rhf_sto3g)               testinfo="CaCl2: RHF energy test: STO-3G basis set";;
    ene_CH4_rhf_sto3g)                 testinfo="CH4: RHF energy test: STO-3G basis set";;
    ene_H2O_rhf_sto3g)                 testinfo="H2O: RHF energy test: STO-3G basis set";;
    ene_HBr_rhf_sto3g)                 testinfo="HBr: RHF energy test: STO-3G basis set";;
    ene_HI_rhf_sto3g)                  testinfo="HI: RHF energy test: STO-3G basis set";;
    ene_KCl_rhf_sto3g)                 testinfo="KCl: RHF energy test: STO-3G basis set";;
    ene_LiF_rhf_sto3g)                 testinfo="LiF: RHF energy test: STO-3G basis set";;
    ene_MgO_rhf_sto3g)                 testinfo="MgO: RHF energy test: STO-3G basis set";;
    ene_NaCl_rhf_sto3g)                testinfo="NaCl: RHF energy test: STO-3G basis set";;
    ene_NH4_rhf_sto3g)                 testinfo="NH4: RHF energy test: STO-3G basis set";;
    ene_PO4_3_rhf_sto3g)               testinfo="PO4-3: RHF energy test: STO-3G basis set";;
    ene_SiH4_rhf_sto3g)                testinfo="SiH4: RHF energy test: STO-3G basis set";;
    ene_SO2_rhf_sto3g)                 testinfo="SO2: RHF energy test: STO-3G basis set";;
    ene_AlH3_rhf_321g)                 testinfo="ALH3: RHF energy test: 3-21G basis set";;
    ene_BeH2_rhf_321g)                 testinfo="BeH2: RHF energy test: 3-21G basis set";;
    ene_BH3_rhf_321g)                  testinfo="BH3: RHF energy test: 3-21G basis set";;
    ene_CaCl2_rhf_321g)                testinfo="CaCl2: RHF energy test: 3-21G basis set";;
    ene_CH4_rhf_321g)                  testinfo="CH4: RHF energy test: 3-21G basis set";;
    ene_H2O_rhf_321g)                  testinfo="H2O: RHF energy test: 3-21G basis set";;
    ene_HBr_rhf_321g)                  testinfo="HBr: RHF energy test: 3-21G basis set";;
    ene_HI_rhf_321g)                   testinfo="HI: RHF energy test: 3-21G basis set";;
    ene_KCl_rhf_321g)                  testinfo="KCl: RHF energy test: 3-21G basis set";;
    ene_LiF_rhf_321g)                  testinfo="LiF: RHF energy test: 3-21G basis set";;
    ene_MgO_rhf_321g)                  testinfo="MgO: RHF energy test: 3-21G basis set";;
    ene_NaCl_rhf_321g)                 testinfo="NaCl: RHF energy test: 3-21G basis set";;
    ene_NH4_rhf_321g)                  testinfo="NH4: RHF energy test: 3-21G basis set";;
    ene_PO4_3_rhf_321g)                testinfo="PO4-3: RHF energy test: 3-21G basis set";;
    ene_SiH4_rhf_321g)                 testinfo="SiH4: RHF energy test: 3-21G basis set";;
    ene_SO2_rhf_321g)                  testinfo="SO2: RHF energy test: 3-21G basis set";;
    ene_AlH3_rhf_631g)                 testinfo="ALH3: RHF energy test: 6-31G basis set";;
    ene_BeH2_rhf_631g)                 testinfo="BeH2: RHF energy test: 6-31G basis set";;
    ene_BH3_rhf_631g)                  testinfo="BH3: RHF energy test: 6-31G basis set";;
    ene_CaCl2_rhf_631g)                testinfo="CaCl2: RHF energy test: 6-31G basis set";;            # currently disabled
    ene_CH4_rhf_631g)                  testinfo="CH4: RHF energy test: 6-31G basis set";;
    ene_H2O_rhf_631g)                  testinfo="H2O: RHF energy test: 6-31G basis set";;
    ene_HBr_rhf_631g)                  testinfo="HBr: RHF energy test: 6-31G basis set";;              # currently disabled
    ene_KCl_rhf_631g)                  testinfo="KCl: RHF energy test: 6-31G basis set";;              # currently disabled
    ene_LiF_rhf_631g)                  testinfo="LiF: RHF energy test: 6-31G basis set";;
    ene_MgO_rhf_631g)                  testinfo="MgO: RHF energy test: 6-31G basis set";;
    ene_NaCl_rhf_631g)                 testinfo="NaCl: RHF energy test: 6-31G basis set";;
    ene_NH4_rhf_631g)                  testinfo="NH4: RHF energy test: 6-31G basis set";;
    ene_PO4_3_rhf_631g)                testinfo="PO4-3: RHF energy test: 6-31G basis set";;
    ene_SiH4_rhf_631g)                 testinfo="SiH4: RHF energy test: 6-31G basis set";;
    ene_SO2_rhf_631g)                  testinfo="SO2: RHF energy test: 6-31G basis set";;
    ene_AlH3_rhf_631gs)                testinfo="ALH3: RHF energy test: 6-31G* basis set";;
    ene_BeH2_rhf_631gs)                testinfo="BeH2: RHF energy test: 6-31G* basis set";;
    ene_BH3_rhf_631gs)                 testinfo="BH3: RHF energy test: 6-31G* basis set";;
    ene_CaCl2_rhf_631gs)               testinfo="CaCl2: RHF energy test: 6-31G* basis set";;           # currently disabled
    ene_CH4_rhf_631gs)                 testinfo="CH4: RHF energy test: 6-31G* basis set";;
    ene_H2O_rhf_631gs)                 testinfo="H2O: RHF energy test: 6-31G* basis set";;
    ene_HBr_rhf_631gs)                 testinfo="HBr: RHF energy test: 6-31G* basis set";;             # currently disabled
    ene_KCl_rhf_631gs)                 testinfo="KCl: RHF energy test: 6-31G* basis set";;             # currently disabled
    ene_LiF_rhf_631gs)                 testinfo="LiF: RHF energy test: 6-31G* basis set";;
    ene_MgO_rhf_631gs)                 testinfo="MgO: RHF energy test: 6-31G* basis set";;
    ene_NaCl_rhf_631gs)                testinfo="NaCl: RHF energy test: 6-31G* basis set";;
    ene_NH4_rhf_631gs)                 testinfo="NH4: RHF energy test: 6-31G* basis set";;
    ene_PO4_3_rhf_631gs)               testinfo="PO4-3: RHF energy test: 6-31G* basis set";;
    ene_SiH4_rhf_631gs)                testinfo="SiH4: RHF energy test: 6-31G* basis set";;
    ene_SO2_rhf_631gs)                 testinfo="SO2: RHF energy test: 6-31G* basis set";;
    ene_AlH3_rhf_631gss)               testinfo="ALH3: RHF energy test: 6-31G** basis set";;
    ene_BeH2_rhf_631gss)               testinfo="BeH2: RHF energy test: 6-31G** basis set";;
    ene_BH3_rhf_631gss)                testinfo="BH3: RHF energy test: 6-31G** basis set";;
    ene_CaCl2_rhf_631gss)              testinfo="CaCl2: RHF energy test: 6-31G** basis set";;          # currently disabled
    ene_CH4_rhf_631gss)                testinfo="CH4: RHF energy test: 6-31G** basis set";;
    ene_H2O_rhf_631gss)                testinfo="H2O: RHF energy test: 6-31G** basis set";;
    ene_HBr_rhf_631gss)                testinfo="HBr: RHF energy test: 6-31G** basis set";;            # currently disabled
    ene_KCl_rhf_631gss)                testinfo="KCl: RHF energy test: 6-31G** basis set";;            # currently disabled
    ene_LiF_rhf_631gss)                testinfo="LiF: RHF energy test: 6-31G** basis set";;
    ene_MgO_rhf_631gss)                testinfo="MgO: RHF energy test: 6-31G** basis set";;
    ene_NaCl_rhf_631gss)               testinfo="NaCl: RHF energy test: 6-31G** basis set";;
    ene_NH4_rhf_631gss)                testinfo="NH4: RHF energy test: 6-31G** basis set";;
    ene_PO4_3_rhf_631gss)              testinfo="PO4-3: RHF energy test: 6-31G** basis set";;
    ene_SiH4_rhf_631gss)               testinfo="SiH4: RHF energy test: 6-31G** basis set";;
    ene_SO2_rhf_631gss)                testinfo="SO2: RHF energy test: 6-31G** basis set";;
    ene_AlH3_rhf_ccpvdz)               testinfo="ALH3: RHF energy test: cc-pVDZ basis set";;           # currently disabled
    ene_BeH2_rhf_ccpvdz)               testinfo="BeH2: RHF energy test: cc-pVDZ basis set";;
    ene_BH3_rhf_ccpvdz)                testinfo="BH3: RHF energy test: cc-pVDZ basis set";;
    ene_CaCl2_rhf_ccpvdz)              testinfo="CaCl2: RHF energy test: cc-pVDZ basis set";;          # currently disabled
    ene_CH4_rhf_ccpvdz)                testinfo="CH4: RHF energy test: cc-pVDZ basis set";;
    ene_H2O_rhf_ccpvdz)                testinfo="H2O: RHF energy test: cc-pVDZ basis set";;
    ene_HBr_rhf_ccpvdz)                testinfo="HBr: RHF energy test: cc-pVDZ basis set";;            # currently disabled
    ene_KCl_rhf_ccpvdz)                testinfo="KCl: RHF energy test: cc-pVDZ basis set";;            # currently disabled
    ene_LiF_rhf_ccpvdz)                testinfo="LiF: RHF energy test: cc-pVDZ basis set";;
    ene_MgO_rhf_ccpvdz)                testinfo="MgO: RHF energy test: cc-pVDZ basis set";;            # currently disabled
    ene_NaCl_rhf_ccpvdz)               testinfo="NaCl: RHF energy test: cc-pVDZ basis set";;           # currently disabled
    ene_NH4_rhf_ccpvdz)                testinfo="NH4: RHF energy test: cc-pVDZ basis set";;
    ene_PH3_rhf_ccpvdz)                testinfo="PH3: RHF energy test: cc-pVDZ basis set";;            # currently disabled
    ene_SiH4_rhf_ccpvdz)               testinfo="SiH4: RHF energy test: cc-pVDZ basis set";;           # currently disabled
    ene_SO2_rhf_ccpvdz)                testinfo="SO2: RHF energy test: cc-pVDZ basis set";;            # currently disabled
    grad_AlH3_b3lyp_def2sv_p)          testinfo="ALH3: DFT gradient test: DEF2-SV(P) basis set";;
    grad_BeH2_b3lyp_def2sv_p)          testinfo="BeH2: DFT gradient test: DEF2-SV(P) basis set";;
    grad_BH3_b3lyp_def2sv_p)           testinfo="BH3: DFT gradient test: DEF2-SV(P) basis set";;
    grad_CaCl2_b3lyp_def2sv_p)         testinfo="CaCl2: DFT gradient test: DEF2-SV(P) basis set";;
    grad_CH4_b3lyp_def2sv_p)           testinfo="CH4: DFT gradient test: DEF2-SV(P) basis set";;
    grad_H2O_b3lyp_def2sv_p)           testinfo="H2O: DFT gradient test: DEF2-SV(P) basis set";;
    grad_HBr_b3lyp_def2sv_p)           testinfo="HBr: DFT gradient test: DEF2-SV(P) basis set";;
    grad_HI_b3lyp_def2sv_p)            testinfo="HI: DFT gradient test: DEF2-SV(P) basis set";;
    grad_KCl_b3lyp_def2sv_p)           testinfo="KCl: DFT gradient test: DEF2-SV(P) basis set";;
    grad_LiF_b3lyp_def2sv_p)           testinfo="LiF: DFT gradient test: DEF2-SV(P) basis set";;
    grad_MgO_b3lyp_def2sv_p)           testinfo="MgO: DFT gradient test: DEF2-SV(P) basis set";;
    grad_NaCl_b3lyp_def2sv_p)          testinfo="NaCl: DFT gradient test: DEF2-SV(P) basis set";;
    grad_NH4_b3lyp_def2sv_p)           testinfo="NH4: DFT gradient test: DEF2-SV(P) basis set";;
    grad_PH3_b3lyp_def2sv_p)           testinfo="PH3: DFT gradient test: DEF2-SV(P) basis set";;
    grad_SiH4_b3lyp_def2sv_p)          testinfo="SiH4: DFT gradient test: DEF2-SV(P) basis set";;
    grad_SO2_b3lyp_def2sv_p)           testinfo="SO2: DFT gradient test: DEF2-SV(P) basis set";;
    grad_AlH3_b3lyp_def2svp)           testinfo="ALH3: DFT gradient test: DEF2-SVP basis set";;
    grad_BeH2_b3lyp_def2svp)           testinfo="BeH2: DFT gradient test: DEF2-SVP basis set";;
    grad_BH3_b3lyp_def2svp)            testinfo="BH3: DFT gradient test: DEF2-SVP basis set";;
    grad_CaCl2_b3lyp_def2svp)          testinfo="CaCl2: DFT gradient test: DEF2-SVP basis set";;
    grad_CH4_b3lyp_def2svp)            testinfo="CH4: DFT gradient test: DEF2-SVP basis set";;
    grad_H2O_b3lyp_def2svp)            testinfo="H2O: DFT gradient test: DEF2-SVP basis set";;
    grad_HBr_b3lyp_def2svp)            testinfo="HBr: DFT gradient test: DEF2-SVP basis set";;
    grad_HI_b3lyp_def2svp)             testinfo="HI: DFT gradient test: DEF2-SVP basis set";;
    grad_KCl_b3lyp_def2svp)            testinfo="KCl: DFT gradient test: DEF2-SVP basis set";;
    grad_LiF_b3lyp_def2svp)            testinfo="LiF: DFT gradient test: DEF2-SVP basis set";;
    grad_MgO_b3lyp_def2svp)            testinfo="MgO: DFT gradient test: DEF2-SVP basis set";;
    grad_NaCl_b3lyp_def2svp)           testinfo="NaCl: DFT gradient test: DEF2-SVP basis set";;
    grad_NH4_b3lyp_def2svp)            testinfo="NH4: DFT gradient test: DEF2-SVP basis set";;
    grad_PH3_b3lyp_def2svp)            testinfo="PH3: DFT gradient test: DEF2-SVP basis set";;
    grad_SiH4_b3lyp_def2svp)           testinfo="SiH4: DFT gradient test: DEF2-SVP basis set";;
    grad_SO2_b3lyp_def2svp)            testinfo="SO2: DFT gradient test: DEF2-SVP basis set";;
    ene_AlH3_rhf_def2svpd)             testinfo="ALH3: RHF energy test: DEF2-SVPD basis set";;
    ene_BeH2_rhf_def2svpd)             testinfo="BeH2: RHF energy test: DEF2-SVPD basis set";;
    ene_BH3_rhf_def2svpd)              testinfo="BH3: RHF energy test: DEF2-SVPD basis set";;
    ene_CaCl2_rhf_def2svpd)            testinfo="CaCl2: RHF energy test: DEF2-SVPD basis set";;        # currently disabled
    ene_CH4_rhf_def2svpd)              testinfo="CH4: RHF energy test: DEF2-SVPD basis set";;
    ene_H2O_rhf_def2svpd)              testinfo="H2O: RHF energy test: DEF2-SVPD basis set";;
    ene_HBr_rhf_def2svpd)              testinfo="HBr: RHF energy test: DEF2-SVPD basis set";;          # currently disabled
    ene_HI_rhf_def2svpd)               testinfo="HI: RHF energy test: DEF2-SVPD basis set";;           # currently disabled
    ene_KCl_rhf_def2svpd)              testinfo="KCl: RHF energy test: DEF2-SVPD basis set";;
    ene_LiF_rhf_def2svpd)              testinfo="LiF: RHF energy test: DEF2-SVPD basis set";;
    ene_MgO_rhf_def2svpd)              testinfo="MgO: RHF energy test: DEF2-SVPD basis set";;
    ene_NaCl_rhf_def2svpd)             testinfo="NaCl: RHF energy test: DEF2-SVPD basis set";;
    ene_NH4_rhf_def2svpd)              testinfo="NH4: RHF energy test: DEF2-SVPD basis set";;
    ene_PH3_rhf_def2svpd)              testinfo="PH3: RHF energy test: DEF2-SVPD basis set";;
    ene_SiH4_rhf_def2svpd)             testinfo="SiH4: RHF energy test: DEF2-SVPD basis set";;
    ene_SO2_rhf_def2svpd)              testinfo="SO2: RHF energy test: DEF2-SVPD basis set";;
    ene_psb5_rhf_631g)                 testinfo="PSB5: RHF energy test: s and p basis functions";;
    ene_psb5_rhf_631gss)               testinfo="PSB5: RHF energy test: s, p and d basis functions";;
    ene_acetone_rhf_321g)              testinfo="Acetone: RHF energy test: s and p basis functions";;
    ene_psb3_blyp_631g)                testinfo="PSB3: DFT energy test: s and p basis functions, native BLYP functional";;
    ene_psb3_blyp_631gss)              testinfo="PSB3: DFT energy test: s, p and d basis functions, native BLYP functional";;
    ene_psb3_b3lyp_631g)               testinfo="PSB3: DFT energy test: s and p basis functions, native B3LYP functional";;
    ene_psb3_b3lyp_631gss)             testinfo="PSB3: DFT energy test: s, p and d basis functions, native B3LYP functional";;
    ene_psb3_libxc_lda_631g)           testinfo="PSB3: DFT energy test: s and p basis functions, libxc LDA functional";;
    ene_psb3_libxc_gga_631g)           testinfo="PSB3: DFT energy test: s and p basis functions, libxc GGA functional";;
    ene_psb3_libxc_hgga_631g)          testinfo="PSB3: DFT energy test: s and p basis functions, libxc hybrid GGA functional";;
    ene_wat2_mp2_631g)                 testinfo="Water-2 MP2 energy test: s and p basis functions"; ismp2='yes';;
    ene_wat2_mp2_631gss)               testinfo="Water-2 MP2 energy test: s, p and d basis functions"; ismp2='yes';;
    grad_nacl_b3lyP_def2svp)           testinfo="Nacl: DFT gradient test: s, p and d basis functions, native B3LYP functional";;
    grad_psb3_b3lyp_631g)              testinfo="PSB3: DFT gradient test: s and p basis functions";;
    grad_psb3_b3lyp_631gss)            testinfo="PSB3: DFT gradient test: s and p and d basis functions";;
    grad_ch3conhch3_b3lyp_ccpvdz)      testinfo="CH3CONHCH3: DFT gradient test: s and p and d basis functions";;
    grad_wat_b3lyp_ccpvdz)             testinfo="Water: DFT point charge gradient test: s and p and d basis functions";;
    grad_c10h9o2s_b3yp_def2svp)        testinfo="C10H9O2S: DFT point charge gradient test: s and p and d basis functions";;
    grad_daspi_meoh_b3lyp_sto3g)       testinfo="DASPI-DCM: DFT point charge gradient test: s and p basis functions";;
    grad_hbdi_meoh_libxc_blyp_sto3g)   testinfo="HBDI-MeOH: DFT point charge gradient test: s and p basis functions";;
    grad_naip_meoh_libxc_pbeh_sto3g)   testinfo="NAIP-MeOH: DFT point charge gradient test: s and p basis functions";;
    grad_ncnaip_b3lyp_sto3g)           testinfo="NAIP2-MeOH: DFT point charge gradient test: s and p basis functions";;
    grad_rpsb_meoh_rhf_sto3g)          testinfo="RPSB-MeOH: RHF point charge gradient test: s and p basis functions";;
    opt_wat_rhf_631g)                  testinfo="Water: RHF geometry optimization test: s and p basis functions";;
    opt_wat_rhf_ccpvdz)                testinfo="Water: RHF geometry optimization test: s, p and d basis functions";;
    opt_nh4_pbe_def2svp)               testinfo="NH4+: DFT geometry optimization test: s, p and d basis functions";;
  esac

  echo $testinfo | tee -a $QUICK_HOME/.quick_runtest.log 

}

# function to get the total number of tests
get_total_tests(){

  if [ "$test_ene" = 'yes' ]; then
    tot_ene_tests=`awk '{print $1}' "$testdir/testlist.txt"| grep "ene" | wc -l`
    total_tests=$((total_tests+tot_ene_tests))
  fi

  if [ "$test_grad" = 'yes' ]; then
    tot_grad_tests=`awk '{print $1}' "$testdir/testlist.txt"| grep "grad" | wc -l`
    total_tests=$((total_tests+tot_grad_tests))
  fi

  if [ "$test_opt" = 'yes' ]; then
    tot_opt_tests=`awk '{print $1}' "$testdir/testlist.txt"| grep "opt" | wc -l`
    total_tests=$((total_tests+tot_opt_tests))
  fi

}

# function to set files for a test run
set_test(){

  cp "$testdir/$t.in" ./
  cp "$testdir/saved/$t.out" "$t.ref.out"
}


# function to run tests. t, tc and total are test name, test count and 
# total test count respectively. accuracy sets the tolerance. 
run_test(){

    echo "Running test $tc of $total_tests" | tee -a $QUICK_HOME/.quick_runtest.log

    print_test_info "$t"

    # Run the test case
    if [ "$buildtype" = 'mpi' ] || [ "$buildtype" = 'cudampi' ] && [ "$ismpirun" = 'yes' ] && [ "$ismp2" = 'no' ]; then
      $DO_PARALLEL "$qbindir/$qexe" "$t.in" > /dev/null 2>&1
    else
      "$qbindir/$qexe" "$t.in" > /dev/null 2>&1
    fi

    if [ "$?" -ne 0 ]; then
      echo "Error: $qexe execution failed."
      echo ""
      exit 1
    fi
  
}

# check electronic, nuclear and total energy
check_energy(){
    
    accuracy='4.0e-5'

    awk '/Begin Energy Calculation/,/End Energy calculation/ {print}' "$t.ref.out" > "$t.ref.ene"
    awk '/Begin Energy Calculation/,/End Energy calculation/ {print}' "$t.out" > "$t.ene"

    "$testdir/dacdif" -k -a "$accuracy" "$t.ref.ene" "$t.ene" | tee -a $QUICK_HOME/.quick_runtest.log

}


# check nuclear and point charge gradients
check_gradient(){

    accuracy='4.0e-3'

    awk '/Begin Gradient Calculation/,/End Gradient Calculation/ {print}' "$t.ref.out" > "$t.ref.grad"
    awk '/Begin Gradient Calculation/,/End Gradient Calculation/ {print}' "$t.out" > "$t.grad"

    "$testdir/dacdif" -k -a "$accuracy" "$t.ref.grad" "$t.grad" | tee -a $QUICK_HOME/.quick_runtest.log

}

# check optimized geometry and force element
check_opt(){

    accuracy='4.0e-3'

    awk '/OPTIMIZED GEOMETRY INFORMATION/,/Finish Optimization Job/ {print}' "$t.ref.out" > "$t.ref.opt"
    awk '/OPTIMIZED GEOMETRY INFORMATION/,/Finish Optimization Job/ {print}' "$t.out" > "$t.opt"

    "$testdir/dacdif" -k -a "$accuracy" "$t.ref.opt" "$t.opt" | tee -a $QUICK_HOME/.quick_runtest.log

}

# check mulliken charges and dipole
check_dipole(){

    accuracy='4.0e-3'

    awk '/Begin Charge and Dipole Calculation/,/End Charge and Dipole Calculation/ {print}' "$t.ref.out" > "$t.ref.dipole"
    awk '/Begin Charge and Dipole Calculation/,/End Charge and Dipole Calculation/ {print}' "$t.out" > "$t.dipole"

    "$testdir/dacdif" -k -a "$accuracy" "$t.ref.dipole" "$t.dipole" | tee -a $QUICK_HOME/.quick_runtest.log

}


# function to clean up files
clean_up(){
    /bin/rm -f "$t.ref.out" "$t.in" ddtmp* *.ene *.grad *.dipole *.opt
}

# function to report summary
print_summary(){

echo "======================== Test Summary ========================" > runtest.summary.tmp0
echo "" >> runtest.summary.tmp0

for buildtype in $buildtypes; do
  total_ene=0
  total_grad=0
  total_opt=0
  failed_ene=0
  failed_grad=0
  failed_opt=0

  sed -n '/'$buildtype' version started/,/All '$buildtype' tests are done/p' $QUICK_HOME/.quick_runtest.log > runtest.summary.tmp1

  for i in `seq 1 $total_tests`; do
    if [ "$i" -lt "$total_tests" ]; then
      j=$((i+1))
      sed -n '/Running test '$i' of '$total_tests'/,/Running test '$j' of '$total_tests'/p' runtest.summary.tmp1 > runtest.summary.tmp2
    elif [ "$i" -eq "$total_tests" ]; then
      sed -n '/Running test '$total_tests'/,/All '$buildtype' tests are done/p' runtest.summary.tmp1 > runtest.summary.tmp2
    fi
 
    if [ `sed -n '/energy test/p' runtest.summary.tmp2 | wc -l` -gt 0 ]; then
      total_ene=$((total_ene+1))
      if [ `sed -n '/possible FAILURE/p' runtest.summary.tmp2 | wc -l` -gt 0 ]; then
        failed_ene=$((failed_ene+1))
      fi
      
    elif [ `sed -n '/gradient test/p' runtest.summary.tmp2 | wc -l` -gt 0 ]; then
      total_grad=$((total_grad+1))
      if [ `sed -n '/possible FAILURE/p' runtest.summary.tmp2 | wc -l` -gt 0 ]; then
        failed_grad=$((failed_grad+1))
      fi
    elif [ `sed -n '/geometry optimization test/p' runtest.summary.tmp2 | wc -l` -gt 0 ]; then
      total_opt=$((total_opt+1))
      if [ `sed -n '/possible FAILURE/p' runtest.summary.tmp2 | wc -l` -gt 0 ]; then
        failed_opt=$((failed_opt+1))
      fi
    fi
    
    /bin/rm -f runtest.summary.tmp2
  done
  
  failed_total=$((failed_ene+failed_grad+failed_opt))

  echo "$buildtype version:" >> runtest.summary.tmp0
  echo "    Energy tests: $failed_ene/$total_ene (failed/total)" >> runtest.summary.tmp0
  echo "    Gradient tests: $failed_grad/$total_grad (failed/total)" >> runtest.summary.tmp0
  echo "    Optimization tests: $failed_opt/$total_opt (failed/total)" >> runtest.summary.tmp0
  echo "    Total tests: $failed_total/$total_tests (failed/total)" >> runtest.summary.tmp0
  echo "" >> runtest.summary.tmp0

  /bin/rm -f runtest.summary.tmp1
done

echo "==============================================================" >> runtest.summary.tmp0

cat runtest.summary.tmp0
/bin/rm -f runtest.summary.tmp0
}

#  !---------------------------------------------------------------------!
#  ! Read input                                                          !
#  !---------------------------------------------------------------------

while [ $# -gt 0 ]; do
  case "$1" in
    --serial)      serial='yes'; buildtypes="$buildtypes serial";;
    --mpi)         mpi='yes'; buildtypes="$buildtypes mpi";;
    --cuda)        cuda='yes'; buildtypes="$buildtypes cuda";;
    --cudampi)     cudampi='yes'; buildtypes="$buildtypes cudampi";;
    --ene)      test_ene='yes';uspec_test='yes';;
    --grad)        test_grad='yes';uspec_test='yes';;
    --opt)         test_opt='yes';uspec_test='yes';;
    -h| -H| -help| --help) print_help;;
     *) 
         echo  "Neglecting unknown flag: $1";;
  esac
  shift
done

#  !---------------------------------------------------------------------!
#  ! Check directories & executables                                     !
#  !---------------------------------------------------------------------!

if [ ! -d "$qbindir" ]; then
  echo  "Error: QUICK bin folder not found. "
  exit 1
fi

if [ ! -d "$qbasisdir" ]; then
  echo  "Error: QUICK basis folder not found. "
  exit 1
else
  export QUICK_BASIS=$qbasisdir
fi

if [ ! -d "$testdir" ]; then
  echo  "Error: QUICK test folder not found. "
  exit 1
fi

if [ "$serial" = 'yes' -o "$mpi" = 'yes' -o "$cuda" = 'yes' -o "$cudampi" = 'yes' ]; then

  if [ "$serial" = 'yes' ] && [ ! -x "$qbindir/quick" ]; then
    echo  "Error: $qbindir/quick not found."
    exit 1
  fi

  if [ "$mpi" = 'yes' ] && [ ! -x "$qbindir/quick.MPI" ]; then
    echo  "Error: $qbindir/quick.MPI not found."
    exit 1
  fi

  if [ "$cuda" = 'yes' ] && [ ! -x "$qbindir/quick.cuda" ]; then
    echo  "Error: $qbindir/quick.cuda not found."
    exit 1
  fi

  if [ "$cudampi" = 'yes' ] && [ ! -x "$qbindir/quick.cuda.MPI" ]; then
    echo  "Error: $qbindir/quick.cuda.MPI not found."
    exit 1
  fi

else

  # automatically check for executables
  if [ -x "$qbindir/quick.cuda.MPI" ]; then
    cudampi='yes'
    buildtypes="$buildtypes cudampi"
  fi

  if [ -x "$qbindir/quick.cuda" ]; then
    cuda='yes'
    buildtypes="$buildtypes cuda"
  fi

  if [ -x "$qbindir/quick.MPI" ]; then
    mpi='yes'
    buildtypes="$buildtypes mpi"
  fi

  if [ -x "$qbindir/quick" ]; then
    serial='yes'
    buildtypes="$buildtypes serial"
  fi

  if [ "$serial" = 'no' -a "$mpi" = 'no' -a "$cuda" = 'no' -a "$cudampi" = 'no' ]; then
    echo  "Error: No QUICK executables found in $qbindir. "
    exit 1
  fi

fi

if [ ! -f "$testdir/testlist.txt" ]; then
  echo  "Error: testlist.txt not found in $testdir. "
  exit 1
fi

echo ""

# check for mpirun 
if [ "$mpi" = 'yes' -o "$cudampi" = 'yes' ]; then
if [ -z "$DO_PARALLEL" ]; then
   export DO_PARALLEL=" "
   echo  "Warning: DO_PARALLEL variable is not set. MPI/CUDA-MPI tests will be carried out with a single core."
else
   ismpirun='yes'
   echo  "MPI command: $DO_PARALLEL"
fi
  echo ""
fi

#  !---------------------------------------------------------------------!
#  ! Create required directories                                         !
#  !---------------------------------------------------------------------!

if [ -d "$testdir/runs" ]; then
  rm -rf "$testdir/runs/"*
else
  mkdir -p "$testdir/runs"
fi

for buildtype in $buildtypes; do
  mkdir -p "$testdir/runs/$buildtype"
done

#  !---------------------------------------------------------------------!
#  ! Set test tyeps                                                      !
#  !---------------------------------------------------------------------!

if [ "$uspec_test" = 'no' ]; then
  test_ene='yes'
  test_grad='yes'
  test_opt='yes'
fi

#  !---------------------------------------------------------------------!
#  ! Run tests                                                           !
#  !---------------------------------------------------------------------!

cd "$testdir"

total_tests=0 # total number of test cases

# get the number of tests to run
get_total_tests

for buildtype in $buildtypes; do

  cdate=`date +'%m/%d/%Y'`
  ctime=`date +'%r'`

  echo  "Testing $QUICK_VERSION $buildtype version started on $cdate at $ctime. " | tee -a $QUICK_HOME/.quick_runtest.log
  echo ""

  # set qexe
  if [ "$buildtype" = 'serial' ]; then
    qexe='quick'
  elif [ "$buildtype" = 'mpi' ]; then
    qexe='quick.MPI'
  elif [ "$buildtype" = 'cuda' ]; then
    qexe='quick.cuda'
  elif [ "$buildtype" = 'cudampi' ]; then
    qexe='quick.cuda.MPI'
  fi


#  total_tests=0 # total number of test cases

  # get the number of tests to run
#  get_total_tests

  tc=1 # test count
  cd "$testdir/runs/$buildtype"

  # Run energy tests
  if [ "$test_ene" = 'yes' ]; then
    for t in `awk '{print $1}' "$testdir/testlist.txt"| grep "ene"`; do
      set_test
      run_test
      check_energy
      check_dipole
      clean_up

      echo ""
      tc=$((tc+1))
    done
  fi

  # Run gradient tests
  if [ "$test_grad" = 'yes' ]; then
    for t in `awk '{print $1}' "$testdir/testlist.txt" |grep "grad"`; do
      set_test
      run_test
      check_energy
      check_gradient
      check_dipole
      clean_up

      echo ""
      tc=$((tc+1))
    done
  fi

  # Run geometry optimization tests
  if [ "$test_opt" = 'yes' ]; then
    for t in `awk '{print $1}' "$testdir/testlist.txt" | grep "opt"`; do
      set_test
      run_test
      check_opt
      check_dipole
      clean_up

      echo ""
      tc=$((tc+1))
    done
  fi
	
  echo "All $buildtype tests are done. The output files are located in $testdir/runs/$buildtype." | tee -a $QUICK_HOME/.quick_runtest.log
  echo ""
  cd "$testdir"
done

cd $installdir

# print test summary
print_summary

/bin/rm -f $QUICK_HOME/.quick_runtest.log

exit 0


