#!/bin/sh

#  !---------------------------------------------------------------------!
#  ! Written by Madu Manathunga on 07/19/2020                            !
#  !                                                                     !
#  ! Copyright (C) 2020-2021 Merz lab                                    !
#  ! Copyright (C) 2020-2021 GÃ¶tz lab                                    !
#  !                                                                     !
#  ! This Source Code Form is subject to the terms of the Mozilla Public !
#  ! License, v. 2.0. If a copy of the MPL was not distributed with this !
#  ! file, You can obtain one at http://mozilla.org/MPL/2.0/.            !
#  !_____________________________________________________________________!
#
#  !---------------------------------------------------------------------!
#  ! This source code runs a series test cases saved in test folder and  !
#  ! verifies the correctness of a QUICK installation.                   !
#  ! ** Must be executed from QUICK_HOME or installation directories.    !
#  !---------------------------------------------------------------------!

#  !---------------------------------------------------------------------!
#  ! QUICK version                                                       !
#  !---------------------------------------------------------------------!

QUICK_VERSION='QUICK-21.03'

#  !---------------------------------------------------------------------!
#  ! Variable definitions                                                !
#  !---------------------------------------------------------------------!

# directories
installdir=`pwd`
testdir="$installdir/test"
qbasisdir="$installdir/basis"
qbindir="$installdir/bin"
export QUICK_HOME=$installdir

# executables

qexe=''
buildtypes=''
serial='no'
mpi='no'
cuda='no'
cudampi='no'

# flag to indicate if mpirun is available
ismpirun='no'
# number of cores for mpi tests
ncores=2

# flag for a mp2 calculation
ismp2=''

# current date time variable
cdate=''
ctime=''

# test types
test_ene='no'
test_grad='no'
test_opt='no'
uspec_test='no'

#  !---------------------------------------------------------------------!
#  ! Function definitions                                                !
#  !---------------------------------------------------------------------!

# this function prints help page
print_help(){

echo  "                                                                                                                                       
  Use this script as ./runtest [flags]                            
                                                                            
  Available flags are:                                                      
      --serial       Tests QUICK serial version                                
      --mpi          Tests QUICK MPI prallel version                           
      --cuda         Tests QUICK GPU version
      --cudampi      Tests QUICK multi-GPU version
      --ene          Run only energy tests
      --grad         Run only gradient tests
      --opt          Run only geometry optimization tests

                                                                            
  If the version flags are not specified, the script will try to detect
  the executables and test them.
  
  "

exit 0;

}


print_test_info(){

  ismp2='no'

  case "$t" in
    ene_psb5_rhf_631g)            echo "RHF energy test: s and p basis functions";;
    ene_psb5_rhf_631gss)          echo "RHF energy test: s, p and d basis functions";;
    ene_psb3_blyp_631g)           echo "DFT energy test: s and p basis functions, native BLYP functional";;
    ene_psb3_blyp_631gss)         echo "DFT energy test: s, p and d basis functions, native BLYP functional";;
    ene_psb3_b3lyp_631g)          echo "DFT energy test: s and p basis functions, native B3LYP functional";;
    ene_psb3_b3lyp_631gss)        echo "DFT energy test: s, p and d basis functions, native B3LYP functional";;
    ene_psb3_libxc_lda_631g)      echo "DFT energy test: s and p basis functions, libxc LDA functional";;
    ene_psb3_libxc_gga_631g)      echo "DFT energy test: s and p basis functions, libxc GGA functional";;
    ene_psb3_libxc_hgga_631g)     echo "DFT energy test: s and p basis functions, libxc hybrid GGA functional";;
    ene_wat2_mp2_631g)            echo "MP2 energy test: s and p basis functions"; ismp2='yes';;
    ene_wat2_mp2_631gss)          echo "MP2 energy test: s, p and d basis functions"; ismp2='yes';;
    grad_psb3_b3lyp_631g)         echo "DFT gradient test: s and p basis functions";;
    grad_psb3_b3lyp_631gss)       echo "DFT gradient test: s and p and d basis functions";;
    grad_ch3conhch3_b3lyp_ccpvdz) echo "DFT gradient test: s and p and d basis functions";;
    opt_wat_rhf_631g)             echo "RHF geometry optimization test: s and p basis functions";;
    opt_wat_rhf_ccpvdz)           echo "RHF geometry optimization test: s, p and d basis functions";;
  esac

}

# function to run tests. t, tc and total are test name, test count and 
# total test count respectively. accuracy sets the tolerance. 
run_test(){

    echo "Running test $tc of $total"
    cp "$testdir/$t.in" ./

    print_test_info "$t"

    # Run the test case
    if [ "$buildtype" = 'mpi' ] || [ "$buildtype" = 'cudampi' ] && [ "$ismpirun" = 'yes' ] && [ "$ismp2" = 'no' ]; then
      $DO_PARALLEL "$qbindir/$qexe" "$t.in" > /dev/null 2>&1
    else
      "$qbindir/$qexe" "$t.in" > /dev/null 2>&1
    fi

    if [ "$?" -ne 0 ]; then
      echo "Error: $qexe execution failed."
      echo ""
      exit 1
    fi

    # Check the accuracy
    accuracy='4.0e-3'
    cp "$testdir/saved/$t.out" "$t.ref.out"
    "$testdir/dacdif" -k -a "$accuracy" "$t.ref.out" "$t.out"
    /bin/rm -f "$t.ref.out" "$t.in" ddtmp* 

    echo ""
    tc=$((tc+1))
  
}

#  !---------------------------------------------------------------------!
#  ! Read input                                                          !
#  !---------------------------------------------------------------------

while [ $# -gt 0 ]; do
  case "$1" in
    --serial)      serial='yes'; buildtypes="$buildtypes serial";;
    --mpi)         mpi='yes'; buildtypes="$buildtypes mpi";;
    --cuda)        cuda='yes'; buildtypes="$buildtypes cuda";;
    --cudampi)     cudampi='yes'; buildtypes="$buildtypes cudampi";;
    -h| -H| -help| --help) print_help;;
     *) 
         echo  "Neglecting unknown flag: $1";;
  esac
  shift
done

#  !---------------------------------------------------------------------!
#  ! Check directories & executables                                     !
#  !---------------------------------------------------------------------!

if [ ! -d "$qbindir" ]; then
  echo  "Error: QUICK bin folder not found. "
  exit 1
fi

if [ ! -d "$qbasisdir" ]; then
  echo  "Error: QUICK basis folder not found. "
  exit 1
else
  export QUICK_BASIS=$qbasisdir
fi

if [ ! -d "$testdir" ]; then
  echo  "Error: QUICK test folder not found. "
  exit 1
fi

if [ "$serial" = 'yes' -o "$mpi" = 'yes' -o "$cuda" = 'yes' -o "$cudampi" = 'yes' ]; then

  if [ "$serial" = 'yes' ] && [ ! -x "$qbindir/quick" ]; then
    echo  "Error: $qbindir/quick not found."
    exit 1
  fi

  if [ "$mpi" = 'yes' ] && [ ! -x "$qbindir/quick.MPI" ]; then
    echo  "Error: $qbindir/quick.MPI not found."
    exit 1
  fi

  if [ "$cuda" = 'yes' ] && [ ! -x "$qbindir/quick.cuda" ]; then
    echo  "Error: $qbindir/quick.cuda not found."
    exit 1
  fi

  if [ "$cudampi" = 'yes' ] && [ ! -x "$qbindir/quick.cuda.MPI" ]; then
    echo  "Error: $qbindir/quick.cuda.MPI not found."
    exit 1
  fi

else

  # automatically check for executables
  if [ -x "$qbindir/quick.cuda.MPI" ]; then
    cudampi='yes'
    buildtypes="$buildtypes cudampi"
  fi

  if [ -x "$qbindir/quick.cuda" ]; then
    cuda='yes'
    buildtypes="$buildtypes cuda"
  fi

  if [ -x "$qbindir/quick.MPI" ]; then
    mpi='yes'
    buildtypes="$buildtypes mpi"
  fi

  if [ -x "$qbindir/quick" ]; then
    serial='yes'
    buildtypes="$buildtypes serial"
  fi

  if [ "$serial" = 'no' -a "$mpi" = 'no' -a "$cuda" = 'no' -a "$cudampi" = 'no' ]; then
    echo  "Error: No QUICK executables found in $qbindir. "
    exit 1
  fi

fi

if [ ! -f "$testdir/testlist.txt" ]; then
  echo  "Error: testlist.txt not found in $testdir. "
  exit 1
fi

echo ""

# check for mpirun 
if [ "$mpi" = 'yes' -o "$cudampi" = 'yes' ]; then
if [ -z "$DO_PARALLEL" ]; then
   export DO_PARALLEL=" "
   echo  "Warning: DO_PARALLEL variable is not set. MPI/CUDA-MPI tests will be carried out with a single core."
else
   ismpirun='yes'
   echo  "MPI command: $DO_PARALLEL"
fi
  echo ""
fi

#  !---------------------------------------------------------------------!
#  ! Create required directories                                         !
#  !---------------------------------------------------------------------!

if [ -d "$testdir/runs" ]; then
  rm -rf "$testdir/runs/"*
else
  mkdir -p "$testdir/runs"
fi

for buildtype in $buildtypes; do
  mkdir -p "$testdir/runs/$buildtype"
done

#  !---------------------------------------------------------------------!
#  ! Run tests                                                           !
#  !---------------------------------------------------------------------!

cd "$testdir"

for buildtype in $buildtypes; do

  cdate=`date +'%m/%d/%Y'`
  ctime=`date +'%r'`

  echo  "Testing $QUICK_VERSION $buildtype version started on $cdate at $ctime. "
  echo ""

  # set qexe
  if [ "$buildtype" = 'serial' ]; then
    qexe='quick'
  elif [ "$buildtype" = 'mpi' ]; then
    qexe='quick.MPI'
  elif [ "$buildtype" = 'cuda' ]; then
    qexe='quick.cuda'
  elif [ "$buildtype" = 'cudampi' ]; then
    qexe='quick.cuda.MPI'
  fi


  total=`cat "$testdir/testlist.txt" |wc -l` # total number of test cases
  tc=1 # test count
  cd "$testdir/runs/$buildtype"

  # Run energy tests
  for t in `awk '{print $1}' "$testdir/testlist.txt"| grep "ene"`; do
    run_test
  done

  # Run gradient tests
  for t in `awk '{print $1}' "$testdir/testlist.txt" |grep "grad"`; do
    run_test
  done

  # Run geometry optimization tests
  for t in `awk '{print $1}' "$testdir/testlist.txt" | grep "opt"`; do
    run_test
  done
	
  echo "All $buildtype tests are done. The output files are located in $testdir/runs/$buildtype."
  echo ""
  cd "$testdir"
done

cd $installdir

exit 0


